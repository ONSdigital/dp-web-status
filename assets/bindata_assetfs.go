// Code generated by go-bindata.
// sources:
// static/index.html
// DO NOT EDIT!

package assets

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _staticIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x54\x4d\x73\xda\x30\x10\xbd\xf3\x2b\xb6\x0a\xcc\x98\x99\xf8\x03\x4a\xda\x8c\x6d\x98\x66\x7a\xef\x85\x43\xcf\xc2\x5a\xdb\x0a\x58\xa2\x92\x80\x38\x19\xfe\x7b\x65\xf9\x03\x26\x9d\x4c\xa6\x39\xe5\x02\xbb\xda\xb7\xab\xb7\xcf\xda\x4d\x4b\x53\xed\x56\xa3\xb4\x44\xca\x56\x23\x80\xd4\x70\xb3\xc3\xd5\xc3\xef\x35\x54\x52\x70\x23\x15\x17\x45\x1a\xb6\xa7\x4d\x5c\x9b\xba\xb5\x00\x36\x92\xd5\xf0\xe2\x4c\xeb\xd0\x6c\x5b\x28\x79\x10\x2c\x86\x1d\x17\x48\x95\x5f\x28\xca\x38\x0a\xe3\xcd\xbf\xcf\x18\x16\xb7\x70\x83\xf7\xf3\x05\xbb\xb7\x46\x14\xe5\x5f\x67\xf9\x34\xf9\x27\xd9\xd7\xfc\x19\x63\x58\x44\xd1\xc4\xfd\x24\xa3\x0e\xe2\x9f\x70\xb3\xe5\xc6\xa7\x82\x57\xd4\x70\x29\x62\x78\xe8\xcd\x5f\xb4\x42\x98\x45\x1a\x90\x6a\x04\x2e\x72\x6e\x99\x63\x5f\xdc\xaf\xe4\xf3\x07\xd2\xfe\x37\xe3\xdc\x32\xfd\xd1\x13\xdd\x62\x9d\x2b\x8b\xd7\xaf\xd2\x7b\xc1\x00\xa2\xc9\xcb\x55\xe3\x7b\xa9\xb9\xbb\xce\x76\x7e\x17\x4d\xce\x03\xec\xee\x0d\xdc\x2c\x7a\x8d\x6c\x4e\xde\x2d\x79\xee\x68\x36\xaa\x7c\x72\x8e\x9f\x99\x5e\x1a\x0e\x93\x90\xea\x4c\xf1\xbd\x01\xad\xb2\x25\x29\x8d\xd9\xeb\x38\x0c\x33\xc9\x30\x78\xfc\x73\x40\x55\x07\x99\xac\xc2\xd6\xf4\xe7\xc1\x3c\x58\x04\x15\x17\xc1\xa3\x26\x2b\x5b\xc4\xa5\x5e\x55\x69\x47\x6b\xec\x31\x99\x1d\x2a\x3b\x3c\xd3\x40\xd9\xd1\xac\xbd\xfc\x20\xb2\x86\x88\x37\x1d\xda\x1f\x07\x05\x1a\x8f\x84\x8c\x1a\x4a\x6e\x61\x40\x34\xfe\xf4\x4a\xa4\xb1\x47\x6e\x1c\x66\x1a\x18\x7c\x32\x6d\xbc\x7f\xe6\xe7\xce\x6a\xff\x2f\x84\xd2\xb0\x5d\x09\xa9\x9b\x72\xd7\xeb\x92\x9c\x38\x33\x65\xec\x44\x4a\xa0\x44\x5e\x94\xa6\xf5\x88\xeb\xa0\xa2\xca\x76\x89\xef\xa2\x13\xc8\xa5\x30\xdd\xa8\x7f\xc3\xaa\xf3\x73\x5a\xf1\x5d\x1d\x83\xa6\x42\xfb\x1a\x15\xcf\x13\x02\x8c\x2b\x74\x6d\x2d\x09\x93\x27\x41\x60\x83\x25\x3d\x72\xa9\x96\x84\xee\x0c\x2a\x41\x0d\x92\x56\xb4\xe1\xfe\xb7\x21\x00\x3f\xa5\x15\xbf\x80\xb5\x94\xe2\x4b\x77\x94\x32\x7e\xec\x39\x5f\x11\x9b\x2d\xf6\x4f\xc9\x90\xe7\x56\x9f\x92\xa2\x58\xad\xed\x72\xdb\xc2\x5e\xe1\x91\xe3\x29\x6e\xde\x81\x3b\xbe\xe0\x6c\x08\x38\xb3\x7c\x1b\xcd\xed\x37\xb6\x7e\x1f\x4d\x43\x7b\x57\xc7\x36\xec\xe8\x3a\xe9\x2e\x4e\x1a\x36\x8a\xbb\x0f\xe0\x56\xf3\xdf\x00\x00\x00\xff\xff\x24\x39\x47\xe6\xa2\x05\x00\x00")

func staticIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_staticIndexHtml,
		"static/index.html",
	)
}

func staticIndexHtml() (*asset, error) {
	bytes, err := staticIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/index.html", size: 1442, mode: os.FileMode(420), modTime: time.Unix(1468313816, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"static/index.html": staticIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"static": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{staticIndexHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: AssetInfo, Prefix: k}
	}
	panic("unreachable")
}
